rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.email.matches('.*@admin\\.com$');
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own data, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      // Users can create their own profile
      allow create: if isAuthenticated() && isOwner(userId);
      // Users can update their own data (except role)
      allow update: if isOwner(userId) && 
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'isAdmin']));
      // Only admins can delete
      allow delete: if isAdmin();
    }
    
    // eBooks collection
    match /ebooks/{ebookId} {
      // Anyone can read ebooks
      allow read: if true;
      // Only admins can create, update, delete
      allow create, update, delete: if isAdmin();
    }
    
    // Orders collection - CRITICAL SECURITY
    match /orders/{orderId} {
      // Users can read their own orders, admins can read all
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      
      // Users can create orders with their own userId
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.status == 'pending' &&
                       !request.resource.data.keys().hasAny(['approved', 'approvedAt', 'approvedBy']);
      
      // ONLY ADMINS can update order status and approval fields
      allow update: if isAdmin() &&
                       // Admin can only change these fields
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['status', 'approvedAt', 'approvedBy']) &&
                       // Status must be valid
                       request.resource.data.status in ['pending', 'approved', 'rejected'];
      
      // Only admins can delete orders
      allow delete: if isAdmin();
    }
    
    // Categories collection
    match /categories/{categoryId} {
      // Anyone can read categories
      allow read: if true;
      // Only admins can create, update, delete
      allow create, update, delete: if isAdmin();
    }
    
    // Purchases collection (for tracking approved downloads)
    match /purchases/{purchaseId} {
      // Users can read their own purchases, admins can read all
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      
      // Only admins can create purchase records (after approval)
      allow create: if isAdmin();
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }
    
    // Analytics collection
    match /analytics/{docId} {
      // Only admins can read/write analytics
      allow read, write: if isAdmin();
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
